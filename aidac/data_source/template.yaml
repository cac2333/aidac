list_tables:
  postgres: |-
    SELECT table_name as tableName
    FROM information_schema.tables 
    WHERE table_schema <> 'pg_catalog' and table_schema <> 'information_schema'    
    AND (table_type = 'BASE TABLE' or table_type = 'LOCAL TEMPORARY');

  monet: |-

table_columns:
  postgres: |-
    SELECT table_schema as schemaName, table_name as tableName, column_name as columnName, data_type as columnType, 
    0 as columnSize, ordinal_position as columnPos, is_nullable as columnNullable
    FROM information_schema.columns 
    WHERE table_name = '{}' 
    ORDER BY schemaName, tableName, columnPos;

create_table:
  postgres: |-
    CREATE TEMPORARY TABLE {0} ({1}); 

copy_data:
  postgres: |-
    COPY {0} ({1}) FROM STDIN;

retrieve_table:
  postres: |-
    SELECT * FROM {0};

row_num:
  postgres: |-
    SELECT COUNT(*) FROM {0};

column_num:
  postgres: |-
    SELECT COUNT(*) FROM information_schema.columns WHERE table_name =\'{}\'

column_hist:
  postgres: |-
    SELECT tablename, null_frac, n_distinct, most_common_vals FROM pg_stats 
    WHERE tablename = '{}' and attname = '{}'

estimate_size:
  postgres: |-
    DROP FUNCTION IF EXISTS count_estimate;
    CREATE FUNCTION count_estimate(query text, OUT rows int, OUT width int) AS $$
    DECLARE
        rec   record;
    BEGIN
        FOR rec IN EXECUTE 'EXPLAIN ' || query LOOP
            rows := substring(rec."QUERY PLAN" FROM ' rows=([[:digit:]]+)');
            width := substring(rec."QUERY PLAN" FROM ' width=([[:digit:]]+)');
            EXIT WHEN rows IS NOT NULL;
        END LOOP;
    END
    $$ LANGUAGE plpgsql;
    SELECT * FROM count_estimate($a${}$a$);
    
    
