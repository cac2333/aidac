list_tables:
  postgres: |-
    SELECT table_name as tableName
    FROM information_schema.tables 
    WHERE table_schema <> 'pg_catalog' and table_schema <> 'information_schema'    
    AND (table_type = 'BASE TABLE' or table_type = 'LOCAL TEMPORARY');

  monet: |-

table_columns:
  postgres: |-
    SELECT table_schema as schemaName, table_name as tableName, column_name as columnName, data_type as columnType, 
    0 as columnSize, ordinal_position as columnPos, is_nullable as columnNullable
    FROM information_schema.columns 
    WHERE table_name = '{}' 
    ORDER BY schemaName, tableName, columnPos;
  postgres2: |-
    CREATE OR REPLACE FUNCTION select_col_meta (_)

sampled_column_size_func:
  postgres: |-
    CREATE OR REPLACE FUNCTION pg_temp.sampled_length(int, text, text, OUT sampled_len numeric) AS
    $func$
    DECLARE
        threshold int;
        tb_name text;
        col_name text;
    BEGIN
        threshold = $1;
        tb_name = $2;
        col_name = $3;
        
        -- %L treat as SQL literal
        EXECUTE format('SELECT avg(len) from (select pg_column_size(%L) as len from %s limit %s) samp;', 
                       col_name, tb_name, threshold) INTO STRICT sampled_len;
    END;
    $func$ LANGUAGE plpgsql;

test:
  postgres: |-
    ||

table_column_meta_func:
  postgres: |-
    CREATE OR REPLACE FUNCTION pg_temp.col_meta_of_table(text, int)
    RETURNS TABLE (cname text, 
                   is_nullable bool, 
                   data_type text,
                  max_len numeric,
                  avg_len numeric, null_frac numeric, n_distinct numeric)
    LANGUAGE plpgsql STABLE AS	
    $func$
    DECLARE
        tup RECORD;
        hist RECORD;
        tb_name text;
        threshold int;
    BEGIN
        tb_name = $1;
        threshold = $2;
        
        FOR tup IN 
            SELECT c.column_name, c.is_nullable, c.data_type, c.character_maximum_length AS max_len
            FROM information_schema.columns c WHERE table_name = tb_name
        LOOP
            cname = tup.column_name;
            is_nullable = tup.is_nullable;
            data_type = tup.data_type;
            max_len = tup.max_len;
            -- 		avg_len = sampled_length(threshold, tb_name, cname);
            EXECUTE 'SELECT null_frac, n_distinct, most_common_vals, avg_width FROM pg_stats 
            WHERE tablename = '|| quote_nullable(tb_name) || ' and attname = ' ||quote_nullable(cname) INTO STRICT hist;
            avg_len = hist.avg_width;
            null_frac = hist.null_frac;
            n_distinct = hist.n_distinct;
            RETURN NEXT;
        END LOOP;
        RETURN;
    END;
    $func$ ;


table_column_meta:
  postgres: |-
    SELECT * FROM pg_temp.col_meta_of_table('{}', {});

table_exists:
  postgres: |-
    SELECT EXISTS (
    SELECT FROM pg_tables
    WHERE  LOWER(tablename)  = LOWER('{}')
    );

create_table:
  postgres: |-
    CREATE TEMPORARY TABLE {0} ({1}); 

copy_data:
  postgres: |-
    COPY {0} ({1}) FROM STDIN;

retrieve_table:
  postres: |-
    SELECT * FROM {0};

row_num:
  postgres: |-
    SELECT COUNT(*) FROM {0};

column_num:
  postgres: |-
    SELECT COUNT(*) FROM information_schema.columns WHERE table_name =\'{}\'

column_hist:
  postgres: |-
    SELECT tablename, null_frac, n_distinct, most_common_vals FROM pg_stats 
    WHERE tablename = '{}' and attname = '{}'

drop_estimate_size:
  postgres: |-
    DROP FUNCTION IF EXISTS count_estimate;

create_estimate_size:
  postgres: |-
    CREATE FUNCTION count_estimate(query text, OUT rows int, OUT width int) AS $$
    DECLARE
        rec   record;
    BEGIN
        FOR rec IN EXECUTE 'EXPLAIN ' || query LOOP
            rows := substring(rec."QUERY PLAN" FROM ' rows=([[:digit:]]+)');
            width := substring(rec."QUERY PLAN" FROM ' width=([[:digit:]]+)');
            EXIT WHEN rows IS NOT NULL;
        END LOOP;
    END
    $$ LANGUAGE plpgsql;

estimate_size:
  postgres: |-
    SELECT * FROM count_estimate($a${}$a$);

estimate_distinct:
  postgres: |-
    
    
    
